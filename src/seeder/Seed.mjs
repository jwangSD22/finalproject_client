import { faker } from "@faker-js/faker";
import axios from "axios";
import config from "../helper/config.js";
import fs from "fs";
import { json } from "react-router-dom";
import { log } from "console";
import { connect } from "http2";


let server = `${config.backendServer}/api`;

//helper function to delay load on API/database
const delay = (ms) =>
  new Promise((resolve) => {

    setTimeout(resolve, ms);

  });

  const superDelay = (ms) =>
  new Promise((resolve) => {

    setTimeout(resolve, ms);
    console.log('Finished seeding friends, ready to connect')
    
  });

async function createRandomUser(map) {
  let fullName, username, password, email, dob;

  fullName = faker.person.fullName();
  username = faker.internet.userName();
  password = faker.internet.password({ length: 20 });
  email = faker.internet.email();
  dob = faker.date.birthdate();

  let formData = {
    fullName: fullName,
    username: username,
    password: password,
    email: email,
    dateOfBirth: dob,
  };

  try {
    let response = await axios.post(
      `${config.backendServer}/api/users`,
      formData
    );
    //response.data.id will have the user's new id
    map.set(response.data.id, {
      id: response.data.id,
      username: username,
      password: password,
      fullName: fullName,
    });

    console.log(`user: ${username} created`)
  } catch (err) {
    
  }
}

let testCreate = async () => {
  //configuration here
  let numberOfUsers = 50;
  let numberOfPosts = 10;
  let numberOfComments = 50

  let userMap = new Map();
  let posts = [];
  let comments = [];

  for (let i = 0; i < numberOfUsers; i++) {
    await createRandomUser(userMap);
  }

  

  //generate posts
  for (let [k, v] of userMap) {
    let headers;
    headers = await loginme(v.username, v.password);

    await seedPFPandBG(v.username,headers)
    await delay(50);

    for (let i = 0; i < numberOfPosts; i++) {
      await delay(50);
      await makePost(headers, posts);

    }
  }

  try{
  //generate likes to 10 posts and also leave a comment on them as well
  for (let [k, v] of userMap) {
    let headers;
    headers = await loginme(v.username, v.password);

    //instantiate a set to collect posts that are randomly generated by the loop
    let randomlySelectedPosts = new Set();
    for (let i = 0; i < numberOfComments; i++) {
      const randomindex = Math.floor(Math.random() * (posts.length + 1));

      randomlySelectedPosts.add(posts[randomindex]);
    }


    //likepost likes the post, leaves a comment, and likes the comment and returns the commentid
    for (let post of randomlySelectedPosts) {
        if(post===undefined){
            continue
        }else{
            let commentID = await likePost(post, headers);
            comments.push(commentID);

        }
    }
  }

  }
  catch(err){
    console.log('error in liking posts and leaving comment')
  }

  try{
    for (let [k, v] of userMap) {
        let headers;
        await delay(50);
        headers = await loginme(v.username, v.password);
        
        let randomlySelectedComments = new Set();
        for (let i = 0; i < numberOfComments; i++) {
          const randomindex = Math.floor(Math.random() * (comments.length + 1));
          randomlySelectedComments.add(comments[randomindex]);
        }

    
        for (let comment of randomlySelectedComments) {
            if(comment===undefined){
                continue
            }
          await likeComment(comment, headers);
        }
      }
  }
  catch(err){
    console.log('error giving like on comments')
  }


  let convertUsers = Object.fromEntries(userMap);
  let finalUserMap = JSON.stringify(convertUsers, undefined, 4);
  let postsJSON = JSON.stringify(posts, undefined, 4);
  let commentsJSON = JSON.stringify(comments, undefined, 4);

  fs.writeFile("./users.txt", finalUserMap, (err) => {
    if (err) throw err;
    console.log("Users Received");
  });

  fs.writeFile("./posts.txt", postsJSON, (err) => {
    if (err) throw err;
    console.log("Post Received");
  });

  fs.writeFile("./comments.txt", commentsJSON, (err) => {
    if (err) throw err;
    console.log("Comments Received");
  });
};

async function loginme(emailOrUsername, password) {
  let headers = {};

  let response = await axios.post(`${config.backendServer}/api/users/login`, {
    emailOrUsername,
    password,
  });

  (headers["Authorization"] = `Bearer ${response.data.token}`),
    (headers["user"] = {
      jwtid: response.data.jwtid,
      jwtusername: response.data.jwtusername,
      jwtemail: response.data.jwtemail,
    });

  return headers;
}

async function makePost(headers, postArray) {
  try {
    let postPhoto = null;
    let data;

    if (Math.floor(Math.random() * 10) > 3) {
      postPhoto = await axios.get(
        `${config.backendServer}/api/seed/randomimg/post-photos`
      );
    }

    if (postPhoto) {
      data = {
        postMessage: faker.lorem.lines({ min: 1, max: 5 }),
        imageKeyArray: [postPhoto.data],
      };
    } else {
      data = {
        postMessage: faker.lorem.lines({ min: 3, max: 8 }),
      };
    }

    let post = await axios.post(`${config.backendServer}/api/posts`, data, {
      headers,
    });

    //post.data holds the id of the post
    postArray.push(post.data);
    console.log(`Post -> ${post.data} created`)
  } catch (err) {
    console.log('error making post')
  }
}

async function likePost(id, headers) {
    
    try{
  //like the post
  let response = await axios.put(`${server}/posts/${id}/togglelike`, null, {
    headers,
  });


let commentID

  //leave a comment
  let data = {
    message: faker.lorem.lines({ min: 1, max: 5 }),
  };

  let comment = await axios.post(`${server}/posts/${id}/newcomment`, data, {
    headers,});



  commentID = comment.data

  console.log(`Comment -> ${commentID} created/liked`)



  //gets the ID for the comment

    let likeComment = await axios.put(
        `${server}/comments/${commentID}/togglelike`,
        null,
        { headers }
      );
    
      return commentID;
}
catch(err){
    console.log('Error liking comment ')
}

}

async function likeComment(id, headers) {
  let likeComment = await axios.put(`${server}/comments/${id}/togglelike`, null, {
    headers,
  });
}

async function seedPFPandBG(username,headers){

    try{
        let pfpKey = await axios.get(`${server}/seed/randomimg/profile-photos`);
        let bgKey = await axios.get(`${server}/seed/randomimg/bg-photos`);

    
        let data = {
            pfpKey:pfpKey.data,
            bgKey:bgKey.data
        }
    
        let response = await axios.put(`${server}/users/${username}`,data,{headers})

        console.log(`${username} pfp and bg updated`)
    }
    catch(err){

        console.log(`FAILED SEEDING A PHOTO`)
    }


}


//6508c48938a9635940c7f59e




async function makeFriends(endUserID,headers){

  if(endUserID===undefined){
    return 
  }

  try{
    //need to async login first to provide headers for this function to work
    let response = await axios.post(`${server}/user/seedfriend/${endUserID}`,null,{headers})
    console.log('friend added')
   }
  catch(err){
    console.log('error making friends')
  }
}


//helper function to generate 10 indices
let gen10indices = () =>{
  let array = []
  for(let i = 0 ;i<10;i++){
    array.push(Math.floor(Math.random()*51))
  }
  return array
}


//helper function to convert users.txt from json to usable JS Map object
let pulljson = async () => {
  try{
    let content = fs.readFileSync('users.txt', 'utf8',)
  
      return new Map(Object.entries(JSON.parse(content)))
  }
  catch(err){
    console.log(err)
  }
}


async function connectFriends () {
  let userarray = [] 
  let allusermap = await pulljson()
  
  for( let [k,v] of allusermap){
    userarray.push(k)
  }
  
  for( let [k,v] of allusermap){
  
    let randomIndices = gen10indices()
    let headers = await loginme (v.username,v.password)
  
    for (let indexValue of randomIndices){

  
      await makeFriends(userarray[indexValue],headers)
    }
  
  }
    
}

//helper function for deleting improperly seeded friend
async function deleteUser (endUserID) {
  let allusermap = await pulljson()
  for( let [k,v] of allusermap){
    let headers = await loginme (v.username,v.password)
    let response = await axios.post(`${server}/user/removeseeded/${endUserID}`,null,{headers})
    console.log(response.data)
  }

}


//helper function for seeding a friend to user map
async function addUser (endUserID) {
  let allusermap = await pulljson()
  for( let [k,v] of allusermap){
    let headers = await loginme (v.username,v.password)
    let response = await makeFriends(endUserID,headers)
  }

}



// // seeds users posts comments
// await testCreate();

// await superDelay(10000)
// // makes friend connections
// await connectFriends()



